AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  KeyName:
    Type: 'AWS::EC2::KeyPair::KeyName'
    Description: 'Name of an existing EC2 KeyPair to enable SSH access to the instances'

Resources:
  MyVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: 'Name'
          Value: 'MyVPC'

  PublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId:
        Ref: 'MyVPC'
      CidrBlock: '10.0.0.0/24'
      AvailabilityZone: !Select
        - '0'
        - Fn::GetAZs: !Ref 'AWS::Region'
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: 'Name'
          Value: 'PublicSubnet'

  PrivateSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId:
        Ref: 'MyVPC'
      CidrBlock: '10.0.1.0/24'
      AvailabilityZone: !Select
        - '1'
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: 'Name'
          Value: 'PrivateSubnet'

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: 'Name'
          Value: 'InternetGateway'

  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId:
        Ref: 'MyVPC'
      InternetGatewayId:
        Ref: 'InternetGateway'

  RouteTablePublic:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId:
        Ref: 'MyVPC'
      Tags:
        - Key: 'Name'
          Value: 'PublicRouteTable'

  RouteTablePrivate:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId:
        Ref: 'MyVPC'
      Tags:
        - Key: 'Name'
          Value: 'PrivateRouteTable'

  RoutePublic:
    Type: 'AWS::EC2::Route'
    DependsOn: 'AttachGateway'
    Properties:
      RouteTableId:
        Ref: 'RouteTablePublic'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId:
        Ref: 'InternetGateway'

  SubnetRouteTableAssociationPublic:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId:
        Ref: 'PublicSubnet'
      RouteTableId:
        Ref: 'RouteTablePublic'

  SubnetRouteTableAssociationPrivate:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId:
        Ref: 'PrivateSubnet'
      RouteTableId:
        Ref: 'RouteTablePrivate'

  BastionSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Bastion Security Group'
      VpcId:
        Ref: 'MyVPC'

  BastionInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: 't2.micro'
      KeyName:
        Ref: 'KeyName'
      ImageId: 'ami-xxxxxxxxxxxxxxxxx'  # Specify a valid AMI ID
      NetworkInterfaces:
        - AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          SubnetId:
            Ref: 'PublicSubnet'
          GroupSet:
            - Ref: 'BastionSecurityGroup'
      Tags:
        - Key: 'Name'
          Value: 'BastionInstance'
